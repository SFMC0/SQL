ds -
<script runat="server">
Platform.Load("Core", "1.1.1");

// ===== CONFIGURATION =====
var CONFIG = {
    // Data Extensions
    de: {
        main: DataExtension.Init("356A0A32-3144-4047-8371-42EC0F142AC8"),
        staging: DataExtension.Init("3558C9D9-1D2C-4EC3-8508-1FFCA8B391DF"),
        errorLog: DataExtension.Init("3A45121F-8BCD-4FD6-A9FA-01223B8FC667"),
        activityLog: DataExtension.Init("SSJS Add DE")
    },
    
    // Field Names
    fields: {
        key: "LSSchedulerEmail__c:ID",
        processed: "Is_Processed"
    },
    
    // Processing Parameters
    batchSize: 1000, // Records per batch
    maxRuntime: 8 * 60, // 8 minutes (in seconds)
    safeMode: true, // Set to false for actual processing
    
    // System
    automationName: "MeetingScheduler_Main Deletion SSJS",
    version: "2.1"
};

// ===== LOGGING SYSTEM =====
var Logger = {
    log: function(message, level) {
        try {
            CONFIG.de.activityLog.Rows.Add({
                Message: String(message).substr(0, 3999),
                Level: level || "INFO",
                Timestamp: Now(),
                Automation: CONFIG.automationName,
                Version: CONFIG.version
            });
            Write("<li>" + String(message) + "</li>");
        } catch (e) {
            Platform.Function.Write("<log failed> " + String(message) + "\n");
        }
    },
    
    error: function(message, details, recordId) {
        try {
            CONFIG.de.errorLog.Rows.Add({
                ErrorMessage: String(message).substr(0, 1999),
                Details: String(details).substr(0, 1999),
                RecordID: String(recordId || "").substr(0, 50),
                Automation: CONFIG.automationName,
                Timestamp: Now(),
                Version: CONFIG.version
            });
            Write("<li style='color:red'>ERROR: " + String(message) + "</li>");
        } catch (e) {
            Platform.Function.Write("<error log failed> " + String(message) + "\n");
        }
    }
};

// ===== BATCH PROCESSOR =====
var BatchProcessor = {
    process: function() {
        var startTime = Now();
        var totalProcessed = 0;
        var lastId = "";
        var batchesProcessed = 0;
        
        Logger.log("Starting processing in " + (CONFIG.safeMode ? "SAFE MODE" : "LIVE MODE"));
        
        while (this.shouldContinue(startTime, batchesProcessed)) {
            var batch = this.getNextBatch(lastId);
            if (!batch || batch.length === 0) break;
            
            var result = this.processBatch(batch);
            totalProcessed += result.processedCount;
            lastId = result.lastId;
            batchesProcessed++;
        }
        
        Logger.log("Processing complete. Total records: " + totalProcessed + 
                  " | Batches: " + batchesProcessed + 
                  " | Time: " + DateDiff(startTime, Now(), "SECOND") + "s");
        
        return totalProcessed;
    },
    
    getNextBatch: function(lastId) {
        var filter = {
            Property: CONFIG.fields.processed,
            SimpleOperator: "equals",
            Value: false
        };
        
        if (lastId) {
            filter = {
                LeftOperand: filter,
                LogicalOperator: "AND",
                RightOperand: {
                    Property: CONFIG.fields.key,
                    SimpleOperator: "greaterThan",
                    Value: lastId
                }
            };
        }
        
        try {
            return CONFIG.de.staging.Rows.Retrieve(filter, CONFIG.batchSize);
        } catch (e) {
            Logger.error("Failed to retrieve batch", e.message);
            return null;
        }
    },
    
    processBatch: function(batch) {
        var processedCount = 0;
        var lastId = "";
        var idsToProcess = [];
        var updatePayload = [];
        
        // Prepare batch data
        for (var i = 0; i < batch.length; i++) {
            var recordId = batch[i][CONFIG.fields.key];
            idsToProcess.push(recordId);
            updatePayload.push({
                Keys: { [CONFIG.fields.key]: recordId },
                Values: { [CONFIG.fields.processed]: 1 }
            });
            lastId = recordId;
        }
        
        // Process batch
        if (!CONFIG.safeMode) {
            try {
                // 1. Mark as processed first (safer)
                var updateResult = CONFIG.de.staging.Rows.Update(updatePayload);
                
                // 2. Delete from main DE
                if (updateResult && updateResult.status === "OK") {
                    var deleteResult = CONFIG.de.main.Rows.Remove(
                        [CONFIG.fields.key], 
                        idsToProcess
                    );
                    processedCount = idsToProcess.length;
                }
            } catch (e) {
                Logger.error("Batch processing failed", e.message, lastId);
            }
        } else {
            Logger.log("[SAFE MODE] Would process batch with " + batch.length + " records");
            processedCount = batch.length; // Count but don't process in safe mode
        }
        
        return {
            processedCount: processedCount,
            lastId: lastId
        };
    },
    
    shouldContinue: function(startTime, batchesProcessed) {
        // Check max runtime
        if (DateDiff(startTime, Now(), "SECOND") > CONFIG.maxRuntime) {
            Logger.log("Stopping due to max runtime reached");
            return false;
        }
        
        // Check max batches (safety)
        if (batchesProcessed >= 50) {
            Logger.log("Stopping after maximum batches processed");
            return false;
        }
        
        return true;
    }
};

// ===== MAIN EXECUTION =====
try {
    Logger.log("Script initialization complete - v" + CONFIG.version);
    var processedCount = BatchProcessor.process();
    
    if (processedCount === 0) {
        Logger.log("No unprocessed records found", "WARNING");
    }
} catch (e) {
    Logger.error("Fatal error in main execution", Stringify(e));
} finally {
    Logger.log("Script execution completed");
}
</script>
-------

function processRecord(record) {
    try {
        var recordID = record[CONFIG.keyField];

        if (!recordID) {
            logMessage("Skipped record with empty ID");
            return;
        }

        // Delete from Main DE
        var deleted = CONFIG.mainDE.Rows.Remove([CONFIG.keyField], [recordID]);
        logMessage("Deleted rows from main DE: " + deleted);

        // Mark as processed in staging DE
        var updated = CONFIG.stagingDE.Rows.Update(
            { [CONFIG.processedField]: true },
            [CONFIG.keyField],
            [recordID]
        );
        logMessage("Updated staging DE rows: " + updated);

        logMessage("Processed record ID: " + recordID);

    } catch (e) {
        logMessage("Error in processRecord(): " + e.toString());
    }
}


--Pro Version 

<script runat="server">
Platform.Load("Core", "1.1");

// === CONFIGURATION ===
var CONFIG = {
    mainDE: DataExtension.Init("356A0A32-3144-4047-8371-42EC0F142AC8"),
    stagingDE: DataExtension.Init("3558C9D9-1D2C-4EC3-8508-1FFCA8B391DF"),
    errorLogDE: DataExtension.Init("3A45121F-8BCD-4FD6-A9FA-01223B8FC667"),
    logDE: DataExtension.Init("SSJS Add DE"),
    keyField: "LSSchedulerEmail__c:ID",
    processedField: "Is_Processed",
    automationName: "MeetingScheduler_Main Deletion SSJS"
};

// === HELPERS ===
function logMessage(msg) {
    Write(msg + "<br>");
    CONFIG.logDE.Rows.Add({ Message: msg });
}

function logError(message, comment) {
    CONFIG.errorLogDE.Rows.Add({
        ErrorMessage: message,
        Automation_Name: CONFIG.automationName,
        Comment: comment || ""
    });
}

// === CORE FUNCTIONS ===
function getUnprocessedRecords() {
    return CONFIG.stagingDE.Rows.Retrieve({
        Property: CONFIG.processedField,
        SimpleOperator: "equals",
        Value: false
    });
}

function processRecord(record) {
    var recordID = record[CONFIG.keyField];

    // Delete from main DE
    CONFIG.mainDE.Rows.Remove([CONFIG.keyField], [recordID]);

    // Update as processed
    CONFIG.stagingDE.Rows.Update(
        { [CONFIG.processedField]: true },
        [CONFIG.keyField],
        [recordID]
    );

    logMessage("Processed record ID: " + recordID);
}

function processAllRecords() {
    var totalProcessed = 0;
    var keepGoing = true;

    while (keepGoing) {
        var records = getUnprocessedRecords();

        if (!records || records.length === 0) {
            if (totalProcessed === 0) {
                var msg = "No unprocessed records found in staging DE.";
                logMessage(msg);
                logError(msg, "Info only - no action required");
            }
            break;
        }

        for (var i = 0; i < records.length; i++) {
            processRecord(records[i]);
            totalProcessed++;
        }
    }

    logMessage("Finished processing total records: " + totalProcessed);
}

// === EXECUTION ===
try {
    processAllRecords();
} catch (e) {
    var errorMsg = e && e.toString ? e.toString() : "Unknown runtime error";
    logError(errorMsg, "Unhandled exception");
    Write("Error: " + errorMsg + "<br>");
}
</script>




--
<script runat="server">
Platform.Load("Core", "1.1");

try {
    var mainDE = DataExtension.Init("356A0A32-3144-4047-8371-42EC0F142AC8");
    var stagingDE = DataExtension.Init("3558C9D9-1D2C-4EC3-8508-1FFCA8B391DF");
    var errorLogDE = DataExtension.Init("3A45121F-8BCD-4FD6-A9FA-01223B8FC667");
    var logDE = DataExtension.Init("SSJS Add DE"); // Your log DE with 'Message' column
    var automationName = "MeetingScheduler_Main Deletion SSJS";

    var totalProcessed = 0;
    var hasMore = true;

    while (hasMore) {
        var filter = {
            Property: "Is_Processed",
            SimpleOperator: "equals",
            Value: false
        };
        var records = stagingDE.Rows.Retrieve(filter);

        if (!records || records.length === 0) {
            if (totalProcessed === 0) {
                var noRecordsMsg = "No unprocessed records found in staging DE.";
                
                // Write to screen
                Write(noRecordsMsg + "<br>");
                
                // Log to errorLogDE
                errorLogDE.Rows.Add({
                    ErrorMessage: noRecordsMsg,
                    Automation_Name: automationName,
                    Comment: "Info only - normal condition"
                });

                // Optionally log to SSJS Add DE too
                logDE.Rows.Add({
                    Message: noRecordsMsg
                });
            }

            // Exit the loop gracefully
            hasMore = false;
            break;
        }

        for (var i = 0; i < records.length; i++) {
            var recordID = records[i]["LSSchedulerEmail__c:ID"];

            // Delete from main DE
            mainDE.Rows.Remove(["LSSchedulerEmail__c:ID"], [recordID]);

            // Mark as processed in staging DE
            stagingDE.Rows.Update(
                { "Is_Processed": true },
                ["LSSchedulerEmail__c:ID"],
                [recordID]
            );

            var message = "Processed record ID: " + recordID;
            Write(message + "<br>");

            logDE.Rows.Add({
                Message: message
            });

            totalProcessed++;
        }
    }

    Write("Finished processing total records: " + totalProcessed + "<br>");

} catch (e) {
    var errorMessage = e.toString();

    errorLogDE.Rows.Add({
        ErrorMessage: errorMessage,
        Automation_Name: automationName,
        Comment: "General Error"
    });

    Write("Error: " + errorMessage + "<br>");
}
</script>



<script runat="server">
Platform.Load("Core", "1.1");

try {
    function DeleteRecords() {
        Write("<br>Starting DeleteRecords function...<br>");
        
        var mainDE = DataExtension.Init("356A0A32-3144-4047-8371-42EC0F142AC8"); // data extension for MeetingScheduler_Main_NEW
        var deleteDE = DataExtension.Init("3558C9D9-1D2C-4EC3-8508-1FFCA8B391DF"); // data extension for temp/staging data extension
        var errorLogDE = DataExtension.Init("3A45121F-8BCD-4FD6-A9FA-01223B8FC667"); // DE for error logging
        var processLogDE = DataExtension.Init("YOUR_PROCESS_LOG_DE_ID"); // Process log DE with message column

        // Get unprocessed records (2500 at a time)
        var filter = {
            Property: "IS_Processed",
            SimpleOperator: "equals",
            Value: false
        };

        Write("<br>Retrieving unprocessed records...<br>");
        var deleteDERecords = deleteDE.Rows.Retrieve(filter);
        var recordCount = deleteDERecords.length;
        Write("<br>Found " + recordCount + " unprocessed records<br>");

        // Log batch start
        var batchStartMessage = "Batch Process Started\n" +
            "Timestamp: " + Platform.Function.SystemDateToLocalDate(Platform.Function.Now()) + "\n" +
            "Total Records Found: " + recordCount;
        processLogDE.Rows.Add({ "message": batchStartMessage });

        // If no records to process or record count is 0, log and exit
        if (!recordCount || recordCount == 0) {
            Write("<br>No records to process. Exiting...<br>");
            processLogDE.Rows.Add({ "message": "No records to process. Process terminated." });
            return;
        }

        // Process records in current batch
        var successCount = 0;
        var errorCount = 0;
        Write("<br>Starting to process " + recordCount + " records...<br>");

        for (var i = 0; i < deleteDERecords.length; i++) {
            try {
                var recordID = deleteDERecords[i]["LSSchedulerEmail__c:Id"];
                Write("<br>Processing record " + (i + 1) + " of " + recordCount + " (ID: " + recordID + ")<br>");
                
                // Attempt to delete from main DE
                var deleteResult = mainDE.Rows.Remove(["LSSchedulerEmail__c:Id"], [recordID]);
                
                if (deleteResult) {
                    // Update IS_Processed flag in staging DE
                    var updateResult = deleteDE.Rows.Update(
                        { IS_Processed: true },
                        ["LSSchedulerEmail__c:Id"], 
                        [recordID]
                    );
                    
                    if (updateResult) {
                        successCount++;
                        Write("<br>Successfully processed record ID: " + recordID + "<br>");
                        
                        // Log successful record processing
                        var successMessage = "Record Processed Successfully\n" +
                            "Record ID: " + recordID + "\n" +
                            "Timestamp: " + Platform.Function.SystemDateToLocalDate(Platform.Function.Now());
                        processLogDE.Rows.Add({ "message": successMessage });
                    }
                }
            } catch (deleteError) {
                errorCount++;
                Write("<br>Error processing record ID: " + recordID + ". Error: " + deleteError + "<br>");
                
                // Log error in process log DE
                var errorMessage = "Record Processing Error\n" +
                    "Record ID: " + recordID + "\n" +
                    "Error: " + deleteError + "\n" +
                    "Timestamp: " + Platform.Function.SystemDateToLocalDate(Platform.Function.Now());
                processLogDE.Rows.Add({ "message": errorMessage });
            }
        }

        // Log batch completion
        var batchCompleteMessage = "Batch Process Completed\n" +
            "Timestamp: " + Platform.Function.SystemDateToLocalDate(Platform.Function.Now()) + "\n" +
            "Total Records Processed: " + recordCount + "\n" +
            "Successful: " + successCount + "\n" +
            "Errors: " + errorCount;
        processLogDE.Rows.Add({ "message": batchCompleteMessage });

        Write("<br>Batch processing complete. Success: " + successCount + ", Errors: " + errorCount + "<br>");
    }

    DeleteRecords();

} catch (ex) {
    Write("<br>General error occurred: " + ex + "<br>");
    processLogDE.Rows.Add({ "message": "General Error: " + ex });
}
</script> 

--

<script runat="server">
Platform.Load("Core", "1.1");

try {
    function DeleteRecords() {
        Write("<br>Starting DeleteRecords function...<br>");
        
        var mainDE = DataExtension.Init("356A0A32-3144-4047-8371-42EC0F142AC8"); // data extension for MeetingScheduler_Main_NEW
        var deleteDE = DataExtension.Init("3558C9D9-1D2C-4EC3-8508-1FFCA8B391DF"); // data extension for temp/staging data extension
        var errorLogDE = DataExtension.Init("3A45121F-8BCD-4FD6-A9FA-01223B8FC667"); // DE for error logging
        var processLogDE = DataExtension.Init("YOUR_PROCESS_LOG_DE_ID"); // New DE for detailed process logging

        // Get unprocessed records (2500 at a time)
        var filter = {
            Property: "IS_Processed",
            SimpleOperator: "equals",
            Value: false
        };

        Write("<br>Retrieving unprocessed records...<br>");
        var deleteDERecords = deleteDE.Rows.Retrieve(filter);
        var recordCount = deleteDERecords.length;
        Write("<br>Found " + recordCount + " unprocessed records<br>");

        // Log initial batch information
        var batchLogID = Platform.Function.GUID();
        processLogDE.Rows.Add({
            BatchID: batchLogID,
            ProcessStartTime: Platform.Function.SystemDateToLocalDate(Platform.Function.Now()),
            TotalRecordsFound: recordCount,
            Status: "Started"
        });

        // If no records to process or record count is 0, log and exit
        if (!recordCount || recordCount == 0) {
            Write("<br>No records to process. Exiting...<br>");
            var noRecordsError = errorLogDE.Rows.Add({
                ErrorMessage: "No unprocessed records found in Staging DE.", 
                Automation_Name: "MeetingScheduler_Main Deletion SSJS"
            });
            return;
        }

        // Process records in current batch
        var successCount = 0;
        var errorCount = 0;
        Write("<br>Starting to process " + recordCount + " records...<br>");

        for (var i = 0; i < deleteDERecords.length; i++) {
            try {
                var recordID = deleteDERecords[i]["LSSchedulerEmail__c:Id"];
                Write("<br>Processing record " + (i + 1) + " of " + recordCount + " (ID: " + recordID + ")<br>");
                
                // Attempt to delete from main DE
                var deleteResult = mainDE.Rows.Remove(["LSSchedulerEmail__c:Id"], [recordID]);
                
                if (deleteResult) {
                    // Update IS_Processed flag in staging DE
                    var updateResult = deleteDE.Rows.Update(
                        { IS_Processed: true },
                        ["LSSchedulerEmail__c:Id"], 
                        [recordID]
                    );
                    
                    if (updateResult) {
                        successCount++;
                        Write("<br>Successfully processed record ID: " + recordID + "<br>");
                        
                        // Log successful record processing
                        processLogDE.Rows.Add({
                            BatchID: batchLogID,
                            RecordID: recordID,
                            ProcessStatus: "Success",
                            ProcessTime: Platform.Function.SystemDateToLocalDate(Platform.Function.Now())
                        });
                    }
                }
            } catch (deleteError) {
                errorCount++;
                Write("<br>Error processing record ID: " + recordID + ". Error: " + deleteError + "<br>");
                
                // Log error in error log DE
                errorLogDE.Rows.Add({
                    ErrorMessage: "Failed to process record ID: " + recordID + ". Error: " + deleteError,
                    Automation_Name: "MeetingScheduler_Main Deletion SSJS"
                });
                
                // Log failed record processing
                processLogDE.Rows.Add({
                    BatchID: batchLogID,
                    RecordID: recordID,
                    ProcessStatus: "Error",
                    ErrorMessage: deleteError,
                    ProcessTime: Platform.Function.SystemDateToLocalDate(Platform.Function.Now())
                });
            }
        }

        // Update batch completion status
        processLogDE.Rows.Add({
            BatchID: batchLogID,
            ProcessEndTime: Platform.Function.SystemDateToLocalDate(Platform.Function.Now()),
            TotalSuccessful: successCount,
            TotalErrors: errorCount,
            Status: "Completed"
        });

        // Log batch processing results
        Write("<br>Batch processing complete. Success: " + successCount + ", Errors: " + errorCount + "<br>");
        errorLogDE.Rows.Add({
            ErrorMessage: "Batch processing complete. Successfully processed: " + successCount + " records. Errors: " + errorCount,
            Automation_Name: "MeetingScheduler_Main Deletion SSJS"
        });
    }

    DeleteRecords();

} catch (ex) {
    Write("<br>General error occurred: " + ex + "<br>");
    var errorLogDE = DataExtension.Init("3A45121F-8BCD-4FD6-A9FA-01223B8FC667");
    var generalError = errorLogDE.Rows.Add({
        ErrorMessage: ex, 
        Automation_Name: "MeetingScheduler_Main Deletion SSJS", 
        Comment: "General Error"
    });
}
</script> 

--#Working 
<script runat="server">
Platform.Load("Core", "1.1");

try {
    var mainDE = DataExtension.Init("356A0A32-3144-4047-8371-42EC0F142AC8");
    var stagingDE = DataExtension.Init("3558C9D9-1D2C-4EC3-8508-1FFCA8B391DF");
    var errorLogDE = DataExtension.Init("3A45121F-8BCD-4FD6-A9FA-01223B8FC667");
    var logDE = DataExtension.Init("SSJS Add DE"); // Your log DE with 'Message' column
    var automationName = "MeetingScheduler_Main Deletion SSJS";

    var totalProcessed = 0;
    var hasMore = true;

    while (hasMore) {
        var filter = {
            Property: "Is_Processed",
            SimpleOperator: "equals",
            Value: false
        };
        var records = stagingDE.Rows.Retrieve(filter);

        if (!records || records.length === 0) {
            if(totalProcessed === 0) {
                errorLogDE.Rows.Add({
                    ErrorMessage: "No unprocessed records found in staging DE.",
                    Automation_Name: automationName,
                    Comment: ""
                });
                Write("No unprocessed records to process.<br>");
            }
            hasMore = false;
            break;
        }

        for (var i = 0; i < records.length; i++) {
            var recordID = records[i]["LSSchedulerEmail__c:ID"]; // Updated field name

            // Delete from main DE
            mainDE.Rows.Remove(["LSSchedulerEmail__c:ID"], [recordID]);

            // Mark as processed in staging DE
            stagingDE.Rows.Update(
                { "Is_Processed": true },
                ["LSSchedulerEmail__c:ID"],
                [recordID]
            );

            var message = "Processed record ID: " + recordID;
            Write(message + "<br>");

            // Add a log entry in the SSJS Add DE
            logDE.Rows.Add({
                Message: message
            });

            totalProcessed++;
        }
    }

    Write("Finished processing total records: " + totalProcessed + "<br>");

} catch (e) {
    var errorMessage = e.toString();
    errorLogDE.Rows.Add({
        ErrorMessage: errorMessage,
        Automation_Name: automationName,
        Comment: "General Error"
    });
    Write("Error: " + errorMessage + "<br>");
}
</script>



---


<script runat="server">
Platform.Load("Core", "1.1");

try {
    var mainDE = DataExtension.Init("356A0A32-3144-4047-8371-42EC0F142AC8");
    var stagingDE = DataExtension.Init("3558C9D9-1D2C-4EC3-8508-1FFCA8B391DF");
    var errorLogDE = DataExtension.Init("3A45121F-8BCD-4FD6-A9FA-01223B8FC667");
    var automationName = "MeetingScheduler_Main Deletion SSJS";

    // Get all unprocessed records from staging DE
    var filter = {
        Property: "Is_Processed",
        SimpleOperator: "equals",
        Value: false
    };
    var records = stagingDE.Rows.Retrieve(filter);

    if (!records || records.length === 0) {
        // Log no records found
        errorLogDE.Rows.Add({
            ErrorMessage: "No unprocessed records found in staging DE.",
            Automation_Name: automationName,
            Comment: ""
        });
        Write("No unprocessed records to process.<br>");
    } else {
        // Loop through each record
        for (var i = 0; i < records.length; i++) {
            var recordID = records[i]["LSSchedulerEmail__c"]; // Replace with your actual field name

            // Delete from main DE
            mainDE.Rows.Remove(["LSSchedulerEmail__c"], [recordID]);

            // Mark as processed in staging DE
            stagingDE.Rows.Update(
                { "Is_Processed": true },
                ["LSSchedulerEmail__c"],
                [recordID]
            );

            Write("Processed record ID: " + recordID + "<br>");
        }
        Write("Finished processing " + records.length + " records.<br>");
    }

} catch (e) {
    var errorMessage = e.toString();
    errorLogDE.Rows.Add({
        ErrorMessage: errorMessage,
        Automation_Name: "MeetingScheduler_Main Deletion SSJS",
        Comment: "General Error"
    });
    Write("Error: " + errorMessage + "<br>");
}
</script>



<script runat="server">
Platform.Load("Core", "1.1");

try {
    // === CONFIGURATION ===
    var config = {
        mainDE: DataExtension.Init("356A0A32-3144-4047-8371-42EC0F142AC8"),
        stagingDE: DataExtension.Init("3558C9D9-1D2C-4EC3-8508-1FFCA8B391DF"),
        archiveDE: DataExtension.Init("437383C8-86C1-4DBE-8411-3D608399B606"),
        errorLogDE: DataExtension.Init("3A45121F-8BCD-4FD6-A9FA-01223B8FC667"),
        automationName: "MeetingScheduler_Main Deletion SSJS"
    };

    function logError(message, comment) {
        config.errorLogDE.Rows.Add({
            ErrorMessage: message,
            Automation_Name: config.automationName,
            Comment: comment || ""
        });
    }

    function markAsProcessed(recordID) {
        config.stagingDE.Rows.Update(
            { "Is_Processed": true },
            ["LSSchedulerEmail__c:Id"],
            [recordID]
        );
    }

    function getUnprocessedRecords() {
        var filter = {
            Property: "Is_Processed",
            SimpleOperator: "equals",
            Value: false
        };
        return config.stagingDE.Rows.Retrieve(filter);
    }

    function archiveHasRecord(recordID) {
        var archiveRecords = config.archiveDE.Rows.Lookup("LSSchedulerEmail__c:Id", recordID);
        return archiveRecords && archiveRecords.length > 0;
    }

    function deleteFromMain(recordID) {
        return config.mainDE.Rows.Remove(["LSSchedulerEmail__c:Id"], [recordID]);
    }

    function processRecord(record) {
        var recordID = record["LSSchedulerEmail__c:Id"];
        if (archiveHasRecord(recordID)) {
            deleteFromMain(recordID);
        } else {
            logError("Record " + recordID + " not found in Archive DE.", "Missing in Archive");
        }
        markAsProcessed(recordID);
    }

    function deleteAllRecords() {
        var processedCount = 0;
        var moreRecords = true;

        while (moreRecords) {
            var unprocessedRecords = getUnprocessedRecords();

            if (!unprocessedRecords || unprocessedRecords.length === 0) {
                if (processedCount === 0) {
                    logError("No unprocessed records found in staging DE.");
                }
                moreRecords = false;
                break;
            }

            for (var i = 0; i < unprocessedRecords.length; i++) {
                processRecord(unprocessedRecords[i]);
                processedCount++;
            }
        }
    }

    // === EXECUTE ===
    deleteAllRecords();

} catch (ex) {
    var errorMessage;
    try {
        errorMessage = ex.toString();
    } catch (e2) {
        errorMessage = "Unknown error occurred.";
    }

    var errorLogDE = DataExtension.Init("3A45121F-8BCD-4FD6-A9FA-01223B8FC667");
    errorLogDE.Rows.Add({
        ErrorMessage: errorMessage,
        Automation_Name: "MeetingScheduler_Main Deletion SSJS",
        Comment: "General Error"
    });
}
</script>




<script runat="server">
Platform.Load("Core", "1.1");

// === CONFIGURATION ===
var config = {
    mainDE: DataExtension.Init("356A0A32-3144-4047-8371-42EC0F142AC8"),
    stagingDE: DataExtension.Init("3558C9D9-1D2C-4EC3-8508-1FFCA8B391DF"),
    archiveDE: DataExtension.Init("437383C8-86C1-4DBE-8411-3D608399B606"),
    errorLogDE: DataExtension.Init("3A45121F-8BCD-4FD6-A9FA-01223B8FC667"),
    automationName: "MeetingScheduler_Main Deletion SSJS"
};

/**
 * Logs an error message to the error logging Data Extension
 * @param {string} message - The error message
 * @param {string} comment - Optional comment for context
 */
function logError(message, comment) {
    config.errorLogDE.Rows.Add({
        ErrorMessage: message,
        Automation_Name: config.automationName,
        Comment: comment || ""
    });
    Write("Logged Error: " + message + "<br>");
}

/**
 * Marks a record as processed in the staging Data Extension
 * @param {string} recordID - The ID of the record to mark processed
 */
function markAsProcessed(recordID) {
    var updated = config.stagingDE.Rows.Update(
        { "Is_Processed": true },
        ["LSSchedulerEmail__c"],  // <-- Replace with your actual field name here
        [recordID]
    );
    Write("Marked record processed: " + recordID + "<br>");
}

/**
 * Retrieves all records from staging DE where Is_Processed = false
 * @returns {Array} Array of unprocessed records
 */
function getUnprocessedRecords() {
    var filter = {
        Property: "Is_Processed",
        SimpleOperator: "equals",
        Value: false
    };
    var records = config.stagingDE.Rows.Retrieve(filter);
    Write("Retrieved " + (records ? records.length : 0) + " unprocessed records<br>");
    return records;
}

/**
 * Checks if the archive DE contains the given record ID
 * @param {string} recordID - The ID to check in archive DE
 * @returns {boolean} True if record exists in archive DE, false otherwise
 */
function archiveHasRecord(recordID) {
    var archiveRecords = config.archiveDE.Rows.Lookup("LSSchedulerEmail__c", recordID);  // <-- Replace with your actual field name here
    var exists = archiveRecords && archiveRecords.length > 0;
    Write("Archive check for " + recordID + ": " + (exists ? "Found" : "Not Found") + "<br>");
    return exists;
}

/**
 * Deletes the record from the main DE by ID
 * @param {string} recordID - The ID of the record to delete
 * @returns {boolean} True if deletion was successful, false otherwise
 */
function deleteFromMain(recordID) {
    var result = config.mainDE.Rows.Remove(["LSSchedulerEmail__c"], [recordID]);  // <-- Replace with your actual field name here
    Write("Deleted from main DE: " + recordID + "<br>");
    return result;
}

/**
 * Processes a single record:
 *  - Checks if record exists in archive DE
 *  - Deletes from main DE if found
 *  - Logs error if not found in archive DE
 *  - Marks record as processed in staging DE
 * @param {Object} record - The record object from staging DE
 */
function processRecord(record) {
    var recordID = record["LSSchedulerEmail__c"];  // <-- Replace with your actual field name here
    Write("Processing record: " + recordID + "<br>");
    if (archiveHasRecord(recordID)) {
        deleteFromMain(recordID);
    } else {
        logError("Record " + recordID + " not found in Archive DE.", "Missing in Archive");
    }
    markAsProcessed(recordID);
}

/**
 * Main loop to delete all unprocessed records in staging DE
 */
function deleteAllRecords() {
    var processedCount = 0;
    var moreRecords = true;

    while (moreRecords) {
        var unprocessedRecords = getUnprocessedRecords();

        if (!unprocessedRecords || unprocessedRecords.length === 0) {
            if (processedCount === 0) {
                logError("No unprocessed records found in staging DE.");
            }
            moreRecords = false;
            Write("No more unprocessed records to process.<br>");
            break;
        }

        for (var i = 0; i < unprocessedRecords.length; i++) {
            processRecord(unprocessedRecords[i]);
            processedCount++;
        }
    }

    Write("Total records processed: " + processedCount + "<br>");
}

// === EXECUTE ===
try {
    deleteAllRecords();
} catch (ex) {
    var errorMessage;
    try {
        errorMessage = ex.toString();
    } catch (e2) {
        errorMessage = "Unknown error occurred.";
    }

    config.errorLogDE.Rows.Add({
        ErrorMessage: errorMessage,
        Automation_Name: config.automationName,
        Comment: "General Error"
    });
    Write("General error: " + errorMessage + "<br>");
}
</script>

