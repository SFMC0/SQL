<script runat="server">
Platform.Load("Core", "1.1");

try {
    function DeleteRecords() {
        Write("<br>Starting DeleteRecords function...<br>");
        
        var mainDE = DataExtension.Init("356A0A32-3144-4047-8371-42EC0F142AC8"); // data extension for MeetingScheduler_Main_NEW
        var deleteDE = DataExtension.Init("3558C9D9-1D2C-4EC3-8508-1FFCA8B391DF"); // data extension for temp/staging data extension
        var errorLogDE = DataExtension.Init("3A45121F-8BCD-4FD6-A9FA-01223B8FC667"); // DE for error logging
        var processLogDE = DataExtension.Init("YOUR_PROCESS_LOG_DE_ID"); // Process log DE with message column

        // Get unprocessed records (2500 at a time)
        var filter = {
            Property: "IS_Processed",
            SimpleOperator: "equals",
            Value: false
        };

        Write("<br>Retrieving unprocessed records...<br>");
        var deleteDERecords = deleteDE.Rows.Retrieve(filter);
        var recordCount = deleteDERecords.length;
        Write("<br>Found " + recordCount + " unprocessed records<br>");

        // Log batch start
        var batchStartMessage = "Batch Process Started\n" +
            "Timestamp: " + Platform.Function.SystemDateToLocalDate(Platform.Function.Now()) + "\n" +
            "Total Records Found: " + recordCount;
        processLogDE.Rows.Add({ "message": batchStartMessage });

        // If no records to process or record count is 0, log and exit
        if (!recordCount || recordCount == 0) {
            Write("<br>No records to process. Exiting...<br>");
            processLogDE.Rows.Add({ "message": "No records to process. Process terminated." });
            return;
        }

        // Process records in current batch
        var successCount = 0;
        var errorCount = 0;
        Write("<br>Starting to process " + recordCount + " records...<br>");

        for (var i = 0; i < deleteDERecords.length; i++) {
            try {
                var recordID = deleteDERecords[i]["LSSchedulerEmail__c:Id"];
                Write("<br>Processing record " + (i + 1) + " of " + recordCount + " (ID: " + recordID + ")<br>");
                
                // Attempt to delete from main DE
                var deleteResult = mainDE.Rows.Remove(["LSSchedulerEmail__c:Id"], [recordID]);
                
                if (deleteResult) {
                    // Update IS_Processed flag in staging DE
                    var updateResult = deleteDE.Rows.Update(
                        { IS_Processed: true },
                        ["LSSchedulerEmail__c:Id"], 
                        [recordID]
                    );
                    
                    if (updateResult) {
                        successCount++;
                        Write("<br>Successfully processed record ID: " + recordID + "<br>");
                        
                        // Log successful record processing
                        var successMessage = "Record Processed Successfully\n" +
                            "Record ID: " + recordID + "\n" +
                            "Timestamp: " + Platform.Function.SystemDateToLocalDate(Platform.Function.Now());
                        processLogDE.Rows.Add({ "message": successMessage });
                    }
                }
            } catch (deleteError) {
                errorCount++;
                Write("<br>Error processing record ID: " + recordID + ". Error: " + deleteError + "<br>");
                
                // Log error in process log DE
                var errorMessage = "Record Processing Error\n" +
                    "Record ID: " + recordID + "\n" +
                    "Error: " + deleteError + "\n" +
                    "Timestamp: " + Platform.Function.SystemDateToLocalDate(Platform.Function.Now());
                processLogDE.Rows.Add({ "message": errorMessage });
            }
        }

        // Log batch completion
        var batchCompleteMessage = "Batch Process Completed\n" +
            "Timestamp: " + Platform.Function.SystemDateToLocalDate(Platform.Function.Now()) + "\n" +
            "Total Records Processed: " + recordCount + "\n" +
            "Successful: " + successCount + "\n" +
            "Errors: " + errorCount;
        processLogDE.Rows.Add({ "message": batchCompleteMessage });

        Write("<br>Batch processing complete. Success: " + successCount + ", Errors: " + errorCount + "<br>");
    }

    DeleteRecords();

} catch (ex) {
    Write("<br>General error occurred: " + ex + "<br>");
    processLogDE.Rows.Add({ "message": "General Error: " + ex });
}
</script> 

--

<script runat="server">
Platform.Load("Core", "1.1");

try {
    function DeleteRecords() {
        Write("<br>Starting DeleteRecords function...<br>");
        
        var mainDE = DataExtension.Init("356A0A32-3144-4047-8371-42EC0F142AC8"); // data extension for MeetingScheduler_Main_NEW
        var deleteDE = DataExtension.Init("3558C9D9-1D2C-4EC3-8508-1FFCA8B391DF"); // data extension for temp/staging data extension
        var errorLogDE = DataExtension.Init("3A45121F-8BCD-4FD6-A9FA-01223B8FC667"); // DE for error logging
        var processLogDE = DataExtension.Init("YOUR_PROCESS_LOG_DE_ID"); // New DE for detailed process logging

        // Get unprocessed records (2500 at a time)
        var filter = {
            Property: "IS_Processed",
            SimpleOperator: "equals",
            Value: false
        };

        Write("<br>Retrieving unprocessed records...<br>");
        var deleteDERecords = deleteDE.Rows.Retrieve(filter);
        var recordCount = deleteDERecords.length;
        Write("<br>Found " + recordCount + " unprocessed records<br>");

        // Log initial batch information
        var batchLogID = Platform.Function.GUID();
        processLogDE.Rows.Add({
            BatchID: batchLogID,
            ProcessStartTime: Platform.Function.SystemDateToLocalDate(Platform.Function.Now()),
            TotalRecordsFound: recordCount,
            Status: "Started"
        });

        // If no records to process or record count is 0, log and exit
        if (!recordCount || recordCount == 0) {
            Write("<br>No records to process. Exiting...<br>");
            var noRecordsError = errorLogDE.Rows.Add({
                ErrorMessage: "No unprocessed records found in Staging DE.", 
                Automation_Name: "MeetingScheduler_Main Deletion SSJS"
            });
            return;
        }

        // Process records in current batch
        var successCount = 0;
        var errorCount = 0;
        Write("<br>Starting to process " + recordCount + " records...<br>");

        for (var i = 0; i < deleteDERecords.length; i++) {
            try {
                var recordID = deleteDERecords[i]["LSSchedulerEmail__c:Id"];
                Write("<br>Processing record " + (i + 1) + " of " + recordCount + " (ID: " + recordID + ")<br>");
                
                // Attempt to delete from main DE
                var deleteResult = mainDE.Rows.Remove(["LSSchedulerEmail__c:Id"], [recordID]);
                
                if (deleteResult) {
                    // Update IS_Processed flag in staging DE
                    var updateResult = deleteDE.Rows.Update(
                        { IS_Processed: true },
                        ["LSSchedulerEmail__c:Id"], 
                        [recordID]
                    );
                    
                    if (updateResult) {
                        successCount++;
                        Write("<br>Successfully processed record ID: " + recordID + "<br>");
                        
                        // Log successful record processing
                        processLogDE.Rows.Add({
                            BatchID: batchLogID,
                            RecordID: recordID,
                            ProcessStatus: "Success",
                            ProcessTime: Platform.Function.SystemDateToLocalDate(Platform.Function.Now())
                        });
                    }
                }
            } catch (deleteError) {
                errorCount++;
                Write("<br>Error processing record ID: " + recordID + ". Error: " + deleteError + "<br>");
                
                // Log error in error log DE
                errorLogDE.Rows.Add({
                    ErrorMessage: "Failed to process record ID: " + recordID + ". Error: " + deleteError,
                    Automation_Name: "MeetingScheduler_Main Deletion SSJS"
                });
                
                // Log failed record processing
                processLogDE.Rows.Add({
                    BatchID: batchLogID,
                    RecordID: recordID,
                    ProcessStatus: "Error",
                    ErrorMessage: deleteError,
                    ProcessTime: Platform.Function.SystemDateToLocalDate(Platform.Function.Now())
                });
            }
        }

        // Update batch completion status
        processLogDE.Rows.Add({
            BatchID: batchLogID,
            ProcessEndTime: Platform.Function.SystemDateToLocalDate(Platform.Function.Now()),
            TotalSuccessful: successCount,
            TotalErrors: errorCount,
            Status: "Completed"
        });

        // Log batch processing results
        Write("<br>Batch processing complete. Success: " + successCount + ", Errors: " + errorCount + "<br>");
        errorLogDE.Rows.Add({
            ErrorMessage: "Batch processing complete. Successfully processed: " + successCount + " records. Errors: " + errorCount,
            Automation_Name: "MeetingScheduler_Main Deletion SSJS"
        });
    }

    DeleteRecords();

} catch (ex) {
    Write("<br>General error occurred: " + ex + "<br>");
    var errorLogDE = DataExtension.Init("3A45121F-8BCD-4FD6-A9FA-01223B8FC667");
    var generalError = errorLogDE.Rows.Add({
        ErrorMessage: ex, 
        Automation_Name: "MeetingScheduler_Main Deletion SSJS", 
        Comment: "General Error"
    });
}
</script> 

--#Working 
<script runat="server">
Platform.Load("Core", "1.1");

try {
    var mainDE = DataExtension.Init("356A0A32-3144-4047-8371-42EC0F142AC8");
    var stagingDE = DataExtension.Init("3558C9D9-1D2C-4EC3-8508-1FFCA8B391DF");
    var errorLogDE = DataExtension.Init("3A45121F-8BCD-4FD6-A9FA-01223B8FC667");
    var logDE = DataExtension.Init("SSJS Add DE"); // Your log DE with 'Message' column
    var automationName = "MeetingScheduler_Main Deletion SSJS";

    var totalProcessed = 0;
    var hasMore = true;

    while (hasMore) {
        var filter = {
            Property: "Is_Processed",
            SimpleOperator: "equals",
            Value: false
        };
        var records = stagingDE.Rows.Retrieve(filter);

        if (!records || records.length === 0) {
            if(totalProcessed === 0) {
                errorLogDE.Rows.Add({
                    ErrorMessage: "No unprocessed records found in staging DE.",
                    Automation_Name: automationName,
                    Comment: ""
                });
                Write("No unprocessed records to process.<br>");
            }
            hasMore = false;
            break;
        }

        for (var i = 0; i < records.length; i++) {
            var recordID = records[i]["LSSchedulerEmail__c:ID"]; // Updated field name

            // Delete from main DE
            mainDE.Rows.Remove(["LSSchedulerEmail__c:ID"], [recordID]);

            // Mark as processed in staging DE
            stagingDE.Rows.Update(
                { "Is_Processed": true },
                ["LSSchedulerEmail__c:ID"],
                [recordID]
            );

            var message = "Processed record ID: " + recordID;
            Write(message + "<br>");

            // Add a log entry in the SSJS Add DE
            logDE.Rows.Add({
                Message: message
            });

            totalProcessed++;
        }
    }

    Write("Finished processing total records: " + totalProcessed + "<br>");

} catch (e) {
    var errorMessage = e.toString();
    errorLogDE.Rows.Add({
        ErrorMessage: errorMessage,
        Automation_Name: automationName,
        Comment: "General Error"
    });
    Write("Error: " + errorMessage + "<br>");
}
</script>



---


<script runat="server">
Platform.Load("Core", "1.1");

try {
    var mainDE = DataExtension.Init("356A0A32-3144-4047-8371-42EC0F142AC8");
    var stagingDE = DataExtension.Init("3558C9D9-1D2C-4EC3-8508-1FFCA8B391DF");
    var errorLogDE = DataExtension.Init("3A45121F-8BCD-4FD6-A9FA-01223B8FC667");
    var automationName = "MeetingScheduler_Main Deletion SSJS";

    // Get all unprocessed records from staging DE
    var filter = {
        Property: "Is_Processed",
        SimpleOperator: "equals",
        Value: false
    };
    var records = stagingDE.Rows.Retrieve(filter);

    if (!records || records.length === 0) {
        // Log no records found
        errorLogDE.Rows.Add({
            ErrorMessage: "No unprocessed records found in staging DE.",
            Automation_Name: automationName,
            Comment: ""
        });
        Write("No unprocessed records to process.<br>");
    } else {
        // Loop through each record
        for (var i = 0; i < records.length; i++) {
            var recordID = records[i]["LSSchedulerEmail__c"]; // Replace with your actual field name

            // Delete from main DE
            mainDE.Rows.Remove(["LSSchedulerEmail__c"], [recordID]);

            // Mark as processed in staging DE
            stagingDE.Rows.Update(
                { "Is_Processed": true },
                ["LSSchedulerEmail__c"],
                [recordID]
            );

            Write("Processed record ID: " + recordID + "<br>");
        }
        Write("Finished processing " + records.length + " records.<br>");
    }

} catch (e) {
    var errorMessage = e.toString();
    errorLogDE.Rows.Add({
        ErrorMessage: errorMessage,
        Automation_Name: "MeetingScheduler_Main Deletion SSJS",
        Comment: "General Error"
    });
    Write("Error: " + errorMessage + "<br>");
}
</script>



<script runat="server">
Platform.Load("Core", "1.1");

try {
    // === CONFIGURATION ===
    var config = {
        mainDE: DataExtension.Init("356A0A32-3144-4047-8371-42EC0F142AC8"),
        stagingDE: DataExtension.Init("3558C9D9-1D2C-4EC3-8508-1FFCA8B391DF"),
        archiveDE: DataExtension.Init("437383C8-86C1-4DBE-8411-3D608399B606"),
        errorLogDE: DataExtension.Init("3A45121F-8BCD-4FD6-A9FA-01223B8FC667"),
        automationName: "MeetingScheduler_Main Deletion SSJS"
    };

    function logError(message, comment) {
        config.errorLogDE.Rows.Add({
            ErrorMessage: message,
            Automation_Name: config.automationName,
            Comment: comment || ""
        });
    }

    function markAsProcessed(recordID) {
        config.stagingDE.Rows.Update(
            { "Is_Processed": true },
            ["LSSchedulerEmail__c:Id"],
            [recordID]
        );
    }

    function getUnprocessedRecords() {
        var filter = {
            Property: "Is_Processed",
            SimpleOperator: "equals",
            Value: false
        };
        return config.stagingDE.Rows.Retrieve(filter);
    }

    function archiveHasRecord(recordID) {
        var archiveRecords = config.archiveDE.Rows.Lookup("LSSchedulerEmail__c:Id", recordID);
        return archiveRecords && archiveRecords.length > 0;
    }

    function deleteFromMain(recordID) {
        return config.mainDE.Rows.Remove(["LSSchedulerEmail__c:Id"], [recordID]);
    }

    function processRecord(record) {
        var recordID = record["LSSchedulerEmail__c:Id"];
        if (archiveHasRecord(recordID)) {
            deleteFromMain(recordID);
        } else {
            logError("Record " + recordID + " not found in Archive DE.", "Missing in Archive");
        }
        markAsProcessed(recordID);
    }

    function deleteAllRecords() {
        var processedCount = 0;
        var moreRecords = true;

        while (moreRecords) {
            var unprocessedRecords = getUnprocessedRecords();

            if (!unprocessedRecords || unprocessedRecords.length === 0) {
                if (processedCount === 0) {
                    logError("No unprocessed records found in staging DE.");
                }
                moreRecords = false;
                break;
            }

            for (var i = 0; i < unprocessedRecords.length; i++) {
                processRecord(unprocessedRecords[i]);
                processedCount++;
            }
        }
    }

    // === EXECUTE ===
    deleteAllRecords();

} catch (ex) {
    var errorMessage;
    try {
        errorMessage = ex.toString();
    } catch (e2) {
        errorMessage = "Unknown error occurred.";
    }

    var errorLogDE = DataExtension.Init("3A45121F-8BCD-4FD6-A9FA-01223B8FC667");
    errorLogDE.Rows.Add({
        ErrorMessage: errorMessage,
        Automation_Name: "MeetingScheduler_Main Deletion SSJS",
        Comment: "General Error"
    });
}
</script>




<script runat="server">
Platform.Load("Core", "1.1");

// === CONFIGURATION ===
var config = {
    mainDE: DataExtension.Init("356A0A32-3144-4047-8371-42EC0F142AC8"),
    stagingDE: DataExtension.Init("3558C9D9-1D2C-4EC3-8508-1FFCA8B391DF"),
    archiveDE: DataExtension.Init("437383C8-86C1-4DBE-8411-3D608399B606"),
    errorLogDE: DataExtension.Init("3A45121F-8BCD-4FD6-A9FA-01223B8FC667"),
    automationName: "MeetingScheduler_Main Deletion SSJS"
};

/**
 * Logs an error message to the error logging Data Extension
 * @param {string} message - The error message
 * @param {string} comment - Optional comment for context
 */
function logError(message, comment) {
    config.errorLogDE.Rows.Add({
        ErrorMessage: message,
        Automation_Name: config.automationName,
        Comment: comment || ""
    });
    Write("Logged Error: " + message + "<br>");
}

/**
 * Marks a record as processed in the staging Data Extension
 * @param {string} recordID - The ID of the record to mark processed
 */
function markAsProcessed(recordID) {
    var updated = config.stagingDE.Rows.Update(
        { "Is_Processed": true },
        ["LSSchedulerEmail__c"],  // <-- Replace with your actual field name here
        [recordID]
    );
    Write("Marked record processed: " + recordID + "<br>");
}

/**
 * Retrieves all records from staging DE where Is_Processed = false
 * @returns {Array} Array of unprocessed records
 */
function getUnprocessedRecords() {
    var filter = {
        Property: "Is_Processed",
        SimpleOperator: "equals",
        Value: false
    };
    var records = config.stagingDE.Rows.Retrieve(filter);
    Write("Retrieved " + (records ? records.length : 0) + " unprocessed records<br>");
    return records;
}

/**
 * Checks if the archive DE contains the given record ID
 * @param {string} recordID - The ID to check in archive DE
 * @returns {boolean} True if record exists in archive DE, false otherwise
 */
function archiveHasRecord(recordID) {
    var archiveRecords = config.archiveDE.Rows.Lookup("LSSchedulerEmail__c", recordID);  // <-- Replace with your actual field name here
    var exists = archiveRecords && archiveRecords.length > 0;
    Write("Archive check for " + recordID + ": " + (exists ? "Found" : "Not Found") + "<br>");
    return exists;
}

/**
 * Deletes the record from the main DE by ID
 * @param {string} recordID - The ID of the record to delete
 * @returns {boolean} True if deletion was successful, false otherwise
 */
function deleteFromMain(recordID) {
    var result = config.mainDE.Rows.Remove(["LSSchedulerEmail__c"], [recordID]);  // <-- Replace with your actual field name here
    Write("Deleted from main DE: " + recordID + "<br>");
    return result;
}

/**
 * Processes a single record:
 *  - Checks if record exists in archive DE
 *  - Deletes from main DE if found
 *  - Logs error if not found in archive DE
 *  - Marks record as processed in staging DE
 * @param {Object} record - The record object from staging DE
 */
function processRecord(record) {
    var recordID = record["LSSchedulerEmail__c"];  // <-- Replace with your actual field name here
    Write("Processing record: " + recordID + "<br>");
    if (archiveHasRecord(recordID)) {
        deleteFromMain(recordID);
    } else {
        logError("Record " + recordID + " not found in Archive DE.", "Missing in Archive");
    }
    markAsProcessed(recordID);
}

/**
 * Main loop to delete all unprocessed records in staging DE
 */
function deleteAllRecords() {
    var processedCount = 0;
    var moreRecords = true;

    while (moreRecords) {
        var unprocessedRecords = getUnprocessedRecords();

        if (!unprocessedRecords || unprocessedRecords.length === 0) {
            if (processedCount === 0) {
                logError("No unprocessed records found in staging DE.");
            }
            moreRecords = false;
            Write("No more unprocessed records to process.<br>");
            break;
        }

        for (var i = 0; i < unprocessedRecords.length; i++) {
            processRecord(unprocessedRecords[i]);
            processedCount++;
        }
    }

    Write("Total records processed: " + processedCount + "<br>");
}

// === EXECUTE ===
try {
    deleteAllRecords();
} catch (ex) {
    var errorMessage;
    try {
        errorMessage = ex.toString();
    } catch (e2) {
        errorMessage = "Unknown error occurred.";
    }

    config.errorLogDE.Rows.Add({
        ErrorMessage: errorMessage,
        Automation_Name: config.automationName,
        Comment: "General Error"
    });
    Write("General error: " + errorMessage + "<br>");
}
</script>

